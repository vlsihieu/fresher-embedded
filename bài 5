#include <stdio.h>

// hướng bài toán
// mảng 1 lưu phần tử độc lập ban đầu
// mảng 2 dựa vị trí tương ứng mảng 1 để đếm 
// xét từng phần tử mảng gốc, mỗi phần tử tồn tại mảng phụ hay chưa, tồn tại tăng biến đếm mảng phụ
// chưa thì thêm mảng phụ

// int arr[10]={1,2,6,4,1,6,2,1,6,2};
int arr[100];
void hienThi(int*, int*, int);

void nhap(int *arr, int *n) {
	*n = 0;
	while(*n <= 0) {
		printf("Nhap n > 0: ");
		scanf("%d", n);
	}
	int i;
	for(i = 0; i < *n; i++) {
		printf("arr[%d] = ", i);
		scanf("%d", &arr[i]);
	}
}
int max_arr(int *b, int n)
{
    int i;
    int max = b[0];
    for(i = 1; i < n; i++)
        if(max < b[i])
            max = b[i];
 
    return max;
}
int chiSo(int *b, int n, int x) {
	int i;
	for(i = 0; i < n; i++) {
		if(b[i] == x)
		{
		    
			return i;
		}
	}
	return -1;
}
void in(int *arr,int n)
{
    for(int i=0;i<n;i++)
	{
	    printf("%d \t",arr[i]);

	}
    
}
void dem(int *arr, int n) 
{
	int b[100]; //  [1, 2, 5]
	int dem[100]; //[5, 6, 7] số lần xuất hiện
	int i=0;
	int size = 0;
	// khởi tạo giá trị ban đầu là 0
	for(i = 0; i < n; i++) {
		dem[i] = 0;
	}
	
	for(i = 0; i < n; i++) 
	{
	    // kiểm tra tồn tại phần tử
		int index = chiSo(b, size, arr[i]);
// 		printf("vi tri:%d\n",index);
		if(index == -1) // phần tủ arr[i] trong b chưa tồn tại
		{
			b[size] = arr[i]; // 
			dem[size] = 1;// giá trị bắt đầu đếm
			size++;// biến đếm tăng
		}
		else 
		{
			dem[index]++; // tăng giá trị biến đếm
// 			printf("vi tri:%d\n",index);
			
		}
	}
	printf("size =%d\n",size);
// 	hienThi(b, dem, n);
	printf("++++++++ KQ ++++++++\n");
	printf("Gia tri, So lan\n");
	int c[100];
	max_arr(dem,n);
	for(int i = 0; i < size; i++) {
		printf("%d:\t%d\n", b[i], dem[i]);
        // printf("%d:\n", b[i], dem[i]);
		
	}
	printf("-----\n");
	
	int max1 = dem[0];
	for(i = 0; i < size; i++) {
	    if (max1 <= dem[i])
	    {
	        c[i] = b[i];
	    }
		
	}
	for(int i = 0; i < dem[i]; i++) {
		printf("%d:\n", c[i]);
	}
// 	in(b,n);
// 	printf("array ban dau\n");
// 	int length = sizeof(arr)/sizeof(int);
	for(int i=0;i<n;i++)
	{
	    printf("%d \t",arr[i]);
	   // if (arr[i] == c[i])
	   // {
	   //     printf("%d \t",i);
	   // }
	    

	}
}


// void hienThi(int *b, int *dem, int n) {
// 	printf("++++++++ KQ ++++++++\n");
// 	printf("Gia tri, So lan\n");
// 	int i;
// 	int c[100];
// 	max_arr(dem,n);
// 	for(int i = 0; i < n; i++) {
// 		printf("%d:\t%d\n", b[i], dem[i]);
//         // printf("%d:\n", b[i], dem[i]);
		
// 	}
// 	printf("-----\n");
	
// 	int max1 = dem[0];
// 	for(i = 0; i < n; i++) {
// 	    if (max1 <= dem[i])
// 	    {
// 	        c[i] = b[i];
// 	    }
		
// 	}
// 	for(int i = 0; i < dem[i]; i++) {
// 		printf("%d:\n", c[i]);
// 	}
// // 	in(b,n);
// // 	printf("array ban dau\n");
// // 	int length = sizeof(arr)/sizeof(int);
// 	for(int i=0;i<n;i++)
// 	{
// 	    printf("%d \t",arr[i]);

// 	}
// }

int main() 
{
	int n;
	
	nhap(arr, &n);
// 	in(arr,&n);
	dem(arr, n);
	
	
	return 0;
}
