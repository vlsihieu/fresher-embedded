#include "device_registers.h"          /* include peripheral declarations S32K144 */
#include "clocks_and_modes.h"
// define pin led RGB
#define PTD0 		0
#define PTD15 		15
#define PTD16 		16
#define LED_BLUE 	PTD0
#define LED_RED 	PTD15
#define LED_GREEN 	PTD16

#define PTC12 		12
#define PTC13 		13
#define BTN1 		PTC12
#define BTN2 		PTC13
// define state led
#define RED_ON 		255
#define GREEN_ON 	254
#define BLUE_ON 	253
#define LED_OFF		PTD->PSOR |= 1<<LED_BLUE | 1<<LED_GREEN | 1<<LED_RED;
// 1s  40mhz
// 0.1s  4mhz

#define VALUE_TVAL	4000000									// f =20Mhz 0.1s
#define Time_LED	(VALUE_TVAL/4000000)				    // Time_LED = VALUE_TVAL/20Mhz = 1



// Flag for BTN
uint8_t CountBTN2 = 0;
uint8_t tg=0;
uint8_t CountBTN1 = 0;
// Time line LPIT0
uint8_t Time_Line_LPIT0 		= 0;
uint8_t timePress1 	= 0;

// prototype function
void LPIT0_init (void);
void NVIC_Init();
void PORT_Init();
void LED_RGB_AUTO(uint8_t Time);
void LED_RGB(uint8_t StateRGB);
void LED_ON(uint8_t LED_state);

int main(void)
{
	PORT_Init();				/* Init PORTC and PORTD */
	SOSC_init_8MHz();       	/* Initialize system oscilator for 8 MHz xtal */
	SPLL_init_160MHz();     	/* Initialize SPLL to 160 MHz with 8 MHz SOSC */
	NormalRUNmode_80MHz();  	/* Init clocks: 80 MHz sysclk & core, 40 MHz bus, 20 MHz flash */
	NVIC_Init();
	LPIT0_init();
	//LED_ON(RED_ON);

	while(1)
	{
		// code your life
        if (CountBTN1 == 0)
        {
            LED_ON(RED_ON);
        }
        else if (CountBTN1 == 1)
        {
            LED_RGB_AUTO(Time_Line_LPIT0);

        }
	}
	return 0;
}

// ---------------------------------------------------- IRQ handler ------------------------------------------------------
void PORTC_IRQHandler(void)
{
	// BUTTON 2 is SW3 on board
	if(PORTC->PCR[BTN2] & 1<<24)
	{
		CountBTN2++;
		if(CountBTN2 >= 2)
        {
			CountBTN2 = 0;
        }

		PORTC->ISFR = 0xFFFFFFFF;
	}
	// BUTTON 1 is SW2 on board
	if(PORTC->PCR[BTN1] & 1<<24)
	{
		CountBTN1=1;// jump to function Auto lED
		PORTC->ISFR = 0xFFFFFFFF;
	}
}

void LPIT0_Ch0_IRQHandler(void)
{
	Time_Line_LPIT0++; // increase 1 unit
	if(Time_Line_LPIT0 >=Time_LED*45)			/* Time Line is reset */
    {
		Time_Line_LPIT0 = 0;
    }
	LPIT0->MSR |= LPIT_MSR_TIF0_MASK; 			/* Clear LPIT0 timer flag 0 */
}

// ----------------------------------------------------- function --------------------------------------------------------
// priority isr
void NVIC_Init()
{
	// NVIC PORTC BUTTON
	S32_NVIC->ICPR[1] = 1 << (61 % 32); /* IRQ61-**** ch0: clr any pending IRQ*/
	S32_NVIC->ISER[1] = 1 << (61 % 32); /* IRQ61-**** ch0: enable IRQ */
	S32_NVIC->IP[61] = 0x9; /* IRQ48-LPIT0 ch0: priority 10 of 0-15*/
	// NVIC LPIT0
	S32_NVIC->ICPR[1] = 1 << (48 % 32);  /* IRQ48-LPIT0 ch0: clr any pending IRQ*/
	S32_NVIC->ISER[1] = 1 << (48 % 32);  /* IRQ48-LPIT0 ch0: enable IRQ */
	S32_NVIC->IP[48] = 0xA;              /* IRQ48-LPIT0 ch0: priority 10 of 0-15*/
}
// port config
void PORT_Init()
{
	// Enable clock PORTC and PORTD
	PCC->PCCn[PCC_PORTC_INDEX]  = PCC_PCCn_CGC_MASK; /* Enable clock for PORT C */
	PCC->PCCn[PCC_PORTD_INDEX]  = PCC_PCCn_CGC_MASK; /* Enable clock for PORT D */
	//portD is GPIO output
    /*PDDR 0 is input , 1 is output*/
	PTD->PDDR |= 1<<LED_BLUE | 1<<LED_RED | 1<<LED_GREEN; /* PTD0 blue, PTD15 red, PTD16 green*/
	PORTD->PCR[LED_BLUE]  |= PORT_PCR_MUX(1); /* Port D0: MUX = ALT1, GPIO (to blue LED on EVB) */
	PORTD->PCR[LED_RED]   |= PORT_PCR_MUX(1);
	PORTD->PCR[LED_GREEN] |= PORT_PCR_MUX(1);

	// PORTC BTN input
	PTC->PDDR &= ~(1<<BTN1);
	PORTC->PCR[BTN1] = PORT_PCR_MUX(1)|PORT_PCR_PFE_MASK;
	PTC->PDDR &= ~(1<<BTN2);
	PORTC->PCR[BTN2] = PORT_PCR_MUX(1)|PORT_PCR_PFE_MASK;
	// Enable interrupt PORTC
	PORTC->PCR[BTN1] |= PORT_PCR_IRQC(9);			// ISF flag and Interrupt on rising edge
	PORTC->PCR[BTN2] |= PORT_PCR_IRQC(11);			// ISF flag and Interrupt on either edge
}
// timer config
void LPIT0_init (void)
{
  PCC->PCCn[PCC_LPIT_INDEX]  = PCC_PCCn_PCS(6);    		/* Clock Src = 6 (SPLL2_DIV2_CLK)*/
  PCC->PCCn[PCC_LPIT_INDEX] |= PCC_PCCn_CGC_MASK; 		/* Enable clk to LPIT0 regs 		*/

  LPIT0->MCR |= LPIT_MCR_M_CEN_MASK;					/* M_CEN=1: enable module clk (allows writing other LPIT0 regs) */
  LPIT0->MIER = LPIT_MIER_TIE0_MASK;  					/* TIE0=1: Timer Interrupt Enabled fot Chan 0 */
  LPIT0->TMR[0].TVAL = VALUE_TVAL;     				 	/* Chan 0 Timeout period: 4M clocks = 0.1seconds */

  LPIT0->TMR[0].TCTRL |= LPIT_TMR_TCTRL_T_EN_MASK;		/* T_EN=1: Timer channel is enabled */
}
//State Led
void LED_ON(uint8_t LED_state)
{
	if(LED_state==RED_ON)
	{
		PTD->PSOR |= 1<<LED_BLUE | 1<<LED_GREEN;
		PTD->PCOR |= 1<<LED_RED;
	}
	if(LED_state==GREEN_ON)
	{
		PTD->PSOR |= 1<<LED_BLUE | 1<<LED_RED;
		PTD->PCOR |= 1<<LED_GREEN;
	}
	if(LED_state==BLUE_ON)
	{
		PTD->PSOR |= 1<<LED_GREEN | 1<<LED_RED;
		PTD->PCOR |= 1<<LED_BLUE;
	}
}

// Time is Time Line of LPIT0
void LED_RGB_AUTO(uint8_t Time)
{

	if(Time == Time_LED*15)
    {
		tg = Time;
		LED_ON(RED_ON);
        if (CountBTN2 == 1)
        {
            timePress1=tg;
            while (1)
            {
                //
                if (CountBTN2 == 2)
                {
                    break;
                }
                /* code */
            }

        }
        if (timePress1>=tg && timePress1<=Time_LED*15)
        {
            LED_ON(RED_ON);
        }
    }
	else if(Time == Time_LED*30)
    {
		LED_ON(GREEN_ON);
        if (CountBTN2 == 1)
        {
            timePress1=tg;
            while (1)
            {
                //
                if (CountBTN2 == 2)
                {
                    break;
                }
                /* code */
            }

        }
        if (timePress1>=tg && timePress1<=Time_LED*30)
        {
            LED_ON(GREEN_ON);
        }
    }
	else if(Time == Time_LED*45)
    {
		LED_ON(BLUE_ON);
        if (CountBTN2 == 1)
        {
            timePress1=tg;
            while (1)
            {
                //
                if (CountBTN2 == 2)
                {
                    break;
                }
                /* code */
            }

        }
        if (timePress1>=tg && timePress1 <=Time_LED*45)
        {
            LED_ON(BLUE_ON);
        }
    }

}
